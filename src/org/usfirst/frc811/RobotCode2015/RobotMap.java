// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robot builder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package src.org.usfirst.frc811.RobotCode2015;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Gyro driveGyro1;
    public static SpeedController drivefrontright;
    public static SpeedController drivefrontleft;
    public static SpeedController drivebackleft;
    public static SpeedController drivebackright;
    public static RobotDrive driveRobotDrive41;
    public static Encoder drivedrive_encoder;
    public static DigitalInput liftLimit_Top;
    public static DigitalInput liftLimit_Bottom;
    public static Encoder liftEncoder_Left;
    public static Encoder liftEncoder_Right;
    public static CANTalon liftTalon_Left;
    public static CANTalon liftTalon_Right;
    public static Compressor clawCompressor1;
    public static DoubleSolenoid clawDoubleSolenoid1;
    public static AnalogPotentiometer armPotentiometer;
    public static CANTalon armarm_talon;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveGyro1 = new Gyro(0);
        LiveWindow.addSensor("Drive", "Gyro 1", driveGyro1);
        driveGyro1.setSensitivity(0.007);
        drivefrontright = new Talon(2);
        LiveWindow.addActuator("Drive", "frontright", (Talon) drivefrontright);
        
        drivefrontleft = new Talon(0);
        LiveWindow.addActuator("Drive", "frontleft", (Talon) drivefrontleft);
        
        drivebackleft = new Talon(3);
        LiveWindow.addActuator("Drive", "backleft", (Talon) drivebackleft);
        
        drivebackright = new Talon(4);
        LiveWindow.addActuator("Drive", "backright", (Talon) drivebackright);
        
        driveRobotDrive41 = new RobotDrive(drivefrontleft, drivebackleft,
              drivefrontright, drivebackright);
        
        driveRobotDrive41.setSafetyEnabled(false);
        driveRobotDrive41.setExpiration(0.1);
        driveRobotDrive41.setSensitivity(0.5);
        driveRobotDrive41.setMaxOutput(1.0);

        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        drivedrive_encoder = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "drive_encoder", drivedrive_encoder);
        drivedrive_encoder.setDistancePerPulse(1.0);
        drivedrive_encoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        liftLimit_Top = new DigitalInput(1);
        LiveWindow.addSensor("Lift", "Limit_Top", liftLimit_Top);
        
        liftLimit_Bottom = new DigitalInput(0);
        LiveWindow.addSensor("Lift", "Limit_Bottom", liftLimit_Bottom);
        
        liftEncoder_Left = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Lift", "Encoder_Left", liftEncoder_Left);
        liftEncoder_Left.setDistancePerPulse(1.0);
        liftEncoder_Left.setPIDSourceParameter(PIDSourceParameter.kRate);
        liftEncoder_Right = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Lift", "Encoder_Right", liftEncoder_Right);
        liftEncoder_Right.setDistancePerPulse(1.0);
        liftEncoder_Right.setPIDSourceParameter(PIDSourceParameter.kRate);
        liftTalon_Left = new CANTalon(6);
        
        
        liftTalon_Right = new CANTalon(7);
        
        
        clawCompressor1 = new Compressor(0);
        
        
        clawDoubleSolenoid1 = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Claw", "Double Solenoid 1", clawDoubleSolenoid1);
        
        armPotentiometer = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("Arm", " Potentiometer", armPotentiometer);
        
        armarm_talon = new CANTalon(8);
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armarm_talon.enableControl();
        liftTalon_Right.enableControl();
        liftTalon_Left.enableControl();
    }
}
